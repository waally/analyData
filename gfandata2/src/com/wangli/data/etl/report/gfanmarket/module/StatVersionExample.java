package com.wangli.data.etl.report.gfanmarket.module;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatVersionExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public StatVersionExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	protected StatVersionExample(StatVersionExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table stat_version
	 * @ibatorgenerated  Mon Nov 24 17:55:55 CST 2014
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andVersionIsNull() {
			addCriterion("version is null");
			return this;
		}

		public Criteria andVersionIsNotNull() {
			addCriterion("version is not null");
			return this;
		}

		public Criteria andVersionEqualTo(String value) {
			addCriterion("version =", value, "version");
			return this;
		}

		public Criteria andVersionNotEqualTo(String value) {
			addCriterion("version <>", value, "version");
			return this;
		}

		public Criteria andVersionGreaterThan(String value) {
			addCriterion("version >", value, "version");
			return this;
		}

		public Criteria andVersionGreaterThanOrEqualTo(String value) {
			addCriterion("version >=", value, "version");
			return this;
		}

		public Criteria andVersionLessThan(String value) {
			addCriterion("version <", value, "version");
			return this;
		}

		public Criteria andVersionLessThanOrEqualTo(String value) {
			addCriterion("version <=", value, "version");
			return this;
		}

		public Criteria andVersionLike(String value) {
			addCriterion("version like", value, "version");
			return this;
		}

		public Criteria andVersionNotLike(String value) {
			addCriterion("version not like", value, "version");
			return this;
		}

		public Criteria andVersionIn(List values) {
			addCriterion("version in", values, "version");
			return this;
		}

		public Criteria andVersionNotIn(List values) {
			addCriterion("version not in", values, "version");
			return this;
		}

		public Criteria andVersionBetween(String value1, String value2) {
			addCriterion("version between", value1, value2, "version");
			return this;
		}

		public Criteria andVersionNotBetween(String value1, String value2) {
			addCriterion("version not between", value1, value2, "version");
			return this;
		}

		public Criteria andVersionCodeIsNull() {
			addCriterion("version_code is null");
			return this;
		}

		public Criteria andVersionCodeIsNotNull() {
			addCriterion("version_code is not null");
			return this;
		}

		public Criteria andVersionCodeEqualTo(String value) {
			addCriterion("version_code =", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeNotEqualTo(String value) {
			addCriterion("version_code <>", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeGreaterThan(String value) {
			addCriterion("version_code >", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeGreaterThanOrEqualTo(String value) {
			addCriterion("version_code >=", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeLessThan(String value) {
			addCriterion("version_code <", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeLessThanOrEqualTo(String value) {
			addCriterion("version_code <=", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeLike(String value) {
			addCriterion("version_code like", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeNotLike(String value) {
			addCriterion("version_code not like", value, "versionCode");
			return this;
		}

		public Criteria andVersionCodeIn(List values) {
			addCriterion("version_code in", values, "versionCode");
			return this;
		}

		public Criteria andVersionCodeNotIn(List values) {
			addCriterion("version_code not in", values, "versionCode");
			return this;
		}

		public Criteria andVersionCodeBetween(String value1, String value2) {
			addCriterion("version_code between", value1, value2, "versionCode");
			return this;
		}

		public Criteria andVersionCodeNotBetween(String value1, String value2) {
			addCriterion("version_code not between", value1, value2,
					"versionCode");
			return this;
		}

		public Criteria andFlagIsNull() {
			addCriterion("flag is null");
			return this;
		}

		public Criteria andFlagIsNotNull() {
			addCriterion("flag is not null");
			return this;
		}

		public Criteria andFlagEqualTo(Boolean value) {
			addCriterion("flag =", value, "flag");
			return this;
		}

		public Criteria andFlagNotEqualTo(Boolean value) {
			addCriterion("flag <>", value, "flag");
			return this;
		}

		public Criteria andFlagGreaterThan(Boolean value) {
			addCriterion("flag >", value, "flag");
			return this;
		}

		public Criteria andFlagGreaterThanOrEqualTo(Boolean value) {
			addCriterion("flag >=", value, "flag");
			return this;
		}

		public Criteria andFlagLessThan(Boolean value) {
			addCriterion("flag <", value, "flag");
			return this;
		}

		public Criteria andFlagLessThanOrEqualTo(Boolean value) {
			addCriterion("flag <=", value, "flag");
			return this;
		}

		public Criteria andFlagIn(List values) {
			addCriterion("flag in", values, "flag");
			return this;
		}

		public Criteria andFlagNotIn(List values) {
			addCriterion("flag not in", values, "flag");
			return this;
		}

		public Criteria andFlagBetween(Boolean value1, Boolean value2) {
			addCriterion("flag between", value1, value2, "flag");
			return this;
		}

		public Criteria andFlagNotBetween(Boolean value1, Boolean value2) {
			addCriterion("flag not between", value1, value2, "flag");
			return this;
		}
	}
}